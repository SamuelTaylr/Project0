[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\treat\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\treat\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.1 (Eclipse Adoptium Java 11.0.13)
[debug]       Load.loadUnit: plugins took 78.7392ms
[debug]       Load.loadUnit: defsScala took 0.2448ms
[debug] [Loading] Scanning directory C:\Users\treat\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\treat\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 11.6121 ms
[debug]           Load.resolveProject(global-plugins) took 36.9258ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\treat\.sbt\1.0\plugins, plugins: List(<none>))) took 70.3536ms
[debug] [Loading] Done in C:\Users\treat\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 88.226ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2005ms
[debug]     Load.loadUnit(file:/C:/Users/treat/.sbt/1.0/plugins/, ...) took 175.201ms
[debug]   Load.apply: load took 328.7601ms
[debug]   Load.apply: resolveProjects took 6.2872ms
[debug]   Load.apply: finalTransforms took 91.3333ms
[debug]   Load.apply: config.delegates took 14.4951ms
[debug]   Load.apply: Def.make(settings)... took 340.866ms
[debug]   Load.apply: structureIndex took 73.9133ms
[debug]   Load.apply: mkStreams took 1.7356ms
[info] loading global plugins from C:\Users\treat\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3249.5996ms
[debug]           Load.loadUnit: plugins took 36.1778ms
[debug]           Load.loadUnit: defsScala took 0.0188ms
[debug] [Loading] Scanning directory C:\Users\treat\IdeaProjects\SamuelTaylorProject0\project
[debug]             Load.loadUnit: mkEval took 7.874ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\treat\IdeaProjects\SamuelTaylorProject0\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.381 ms
[info] loading settings for project samueltaylorproject0-build from idea1.sbt ...
[debug]               Load.resolveProject(samueltaylorproject0-build) took 2.1914ms
[debug]             Load.loadTransitive: finalizeProject(Project(id samueltaylorproject0-build, base: C:\Users\treat\IdeaProjects\SamuelTaylorProject0\project, plugins: List(<none>))) took 5.1175ms
[debug] [Loading] Done in C:\Users\treat\IdeaProjects\SamuelTaylorProject0\project, returning: (samueltaylorproject0-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1671.5839ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.1964ms
[debug]         Load.loadUnit(file:/C:/Users/treat/IdeaProjects/SamuelTaylorProject0/project/, ...) took 1712.3133ms
[debug]       Load.apply: load took 1713.4301ms
[debug]       Load.apply: resolveProjects took 0.0748ms
[debug]       Load.apply: finalTransforms took 6.4825ms
[debug]       Load.apply: config.delegates took 0.4207ms
[debug]       Load.apply: Def.make(settings)... took 50.1839ms
[debug]       Load.apply: structureIndex took 18.4649ms
[debug]       Load.apply: mkStreams took 0.0024ms
[info] loading project definition from C:\Users\treat\IdeaProjects\SamuelTaylorProject0\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 5576.6747ms
[debug]     Load.loadUnit: defsScala took 0.0044ms
[debug] [Loading] Scanning directory C:\Users\treat\IdeaProjects\SamuelTaylorProject0
[debug]       Load.loadUnit: mkEval took 0.3774ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.867 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 21.4418ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\treat\IdeaProjects\SamuelTaylorProject0, plugins: List(<none>))) took 26.685ms
[debug] [Loading] Done in C:\Users\treat\IdeaProjects\SamuelTaylorProject0, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 766.3755ms
[debug]     Load.loadUnit: cleanEvalClasses took 5.5312ms
[debug]   Load.loadUnit(file:/C:/Users/treat/IdeaProjects/SamuelTaylorProject0/, ...) took 6349.7524ms
[debug] Load.apply: load took 6350.9585ms
[debug] Load.apply: resolveProjects took 0.0988ms
[debug] Load.apply: finalTransforms took 16.7335ms
[debug] Load.apply: config.delegates took 0.2625ms
[debug] Load.apply: Def.make(settings)... took 49.1016ms
[debug] Load.apply: structureIndex took 14.3606ms
[debug] Load.apply: mkStreams took 0.0024ms
[info] set current project to SamuelTaylorProject0 (in build file:/C:/Users/treat/IdeaProjects/SamuelTaylorProject0/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 51199 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 51199, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to SamuelTaylorProject0 (in build file:/C:/Users/treat/IdeaProjects/SamuelTaylorProject0/)
[debug] > Exec(idea-shell, None, None)
